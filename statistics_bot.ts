import { Bot, Context, Keyboard, InputFile} from 'grammy'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É grammy
import fs from 'fs'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import dotenv from 'dotenv';
// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config();
const token = process.env.BOT_TOKEN;
const mainUser = process.env.YOUR_TG
if (!token) {
    throw new Error('Token is not defined. Please set the BOT_TOKEN environment variable.');
}
const bot = new Bot(token);

let messageCount = 0;
let outgoingMessageCount = 0;
let groupMessageCount = 0;
const excludedChatId = 746522064; // ID —á–∞—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å

interface MessageInfo {
    user_id: number | null;
    user_name: string;
    group_id: number | null; // –ó–¥–µ—Å—å –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø –Ω–∞ number | null
    group_name: string;
    direction: string;
    timestamp: string;
}
// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const keyboard = new Keyboard().text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞').text('üì§ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞').text('üó≥Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º').resized();

bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.', {
        reply_markup: keyboard,
    });
});
bot.hears('üì§ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
    const inputFile = new InputFile('./statistics.txt'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        await ctx.replyWithDocument(inputFile, { caption: '–í–∞—à —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    return; // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤—Ö–æ–¥—è—â–µ–µ
});

bot.hears('üó≥Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º', async (ctx) => {
    const inputFile = new InputFile('./full_statistics.txt'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        await ctx.replyWithDocument(inputFile, { caption: '–í–∞—à —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    return; // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤—Ö–æ–¥—è—â–µ–µ
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
const replyWithoutCounting = async (ctx: Context, text: string, options?: any) => {
    await ctx.reply(text, options);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª
let lastDate = ''; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
 const path = 'statistics.json'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
const loadState = () => {
    if (fs.existsSync(path)) {
        const data = fs.readFileSync(path, 'utf-8');
        const state = JSON.parse(data);
        messageCount = state.messageCount || 0;
        outgoingMessageCount = state.outgoingMessageCount || 0;
        groupMessageCount = state.groupMessageCount || 0;
        lastDate = state.lastDate || '';
    }
};

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª
const saveState = () => {
    const state = {
        messageCount,
        outgoingMessageCount,
        groupMessageCount,
        lastDate
    };
    fs.writeFileSync(path, JSON.stringify(state), 'utf-8');
};

const saveStatisticsToFile = async () => {
    const currentDate = new Date().toLocaleDateString('ru-RU');

    // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    if (lastDate !== currentDate) {
        lastDate = currentDate; // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        messageCount = 0; // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        outgoingMessageCount = 0;
        groupMessageCount = 0;
    }

//    console.log(`–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (currentDate): ${currentDate}, –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ (lastDate): ${lastDate}`);
    let foundToday = false;
    let statsContent = ''; // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª

    // console.log(`–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:
    // –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageCount},
    // –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${outgoingMessageCount},
    // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${groupMessageCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (fs.existsSync('statistics.txt')) {
        const fileContent = fs.readFileSync('statistics.txt', 'utf8');
        const lines = fileContent.split('\n').filter(line => line.trim() !== '');

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç
        if (lines.length === 0) {
            statsContent += '–î–∞—Ç–∞,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n';
        }

        for (let i = 0; i < lines.length; i++) {
            if (lines[i].includes(currentDate)) {
                foundToday = true;
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                statsContent += `${currentDate},${messageCount},${outgoingMessageCount},${groupMessageCount}\n`;

                break;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                statsContent += lines[i] + '\n';
            }
        }
    }

// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∏–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (!foundToday || lastDate !== currentDate) {
        statsContent += `${currentDate},${messageCount},${outgoingMessageCount},${groupMessageCount}\n`;
    }



    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
    fs.writeFileSync('statistics.txt', statsContent.trim(), 'utf8');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveState();
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
loadState();

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
//    console.log(`–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –≤ ${new Date().toISOString()}`);
    await saveStatisticsToFile();
}, 10_000);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
const saveFullStatisticsToFile = async (messageInfo: MessageInfo) => {
    const statsContent = `${messageInfo.user_id},${messageInfo.user_name},${messageInfo.group_id},${messageInfo.group_name},${messageInfo.direction}, ${messageInfo.timestamp}\n`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (fs.existsSync('full_statistics.txt')) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        fs.appendFileSync('full_statistics.txt', statsContent, 'utf8');
    } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = 'User ID,User Name,Group ID,Group Name,Direction,Timestamp\n';
        fs.writeFileSync('full_statistics.txt', header + statsContent, 'utf8');
    }

//    console.log('–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª full_statistics.txt');
};



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å —Å–æ–æ–±—â–µ–Ω–∏–π:
bot.on('business_message', async (ctx: Context) => {
    const businessMessage = ctx.update.business_message;
    const user = businessMessage ? businessMessage.from : null;

    if (businessMessage && 'text' in businessMessage) {
        const username = user ? user.username || user.first_name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const date = new Date();

        const datePart = date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
        });

        const timePart = date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false // –£–±–∏—Ä–∞–µ–º 12-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        });

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å –ø—Ä–æ–±–µ–ª–æ–º
        const timestamp = `${datePart} ${timePart}`;

//        console.log(`–ü–æ–ª—É—á–µ–Ω–æ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username}: ${businessMessage.text}`);

        const chat = ctx.chat;
        if (!chat) {
            console.error('Chat is undefined');
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        let direction = '–í—Ö–æ–¥—è—â–∏–µ'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–µ
        if (username === mainUser) {
            outgoingMessageCount++;
    //        console.log(`–°—á–µ—Ç—á–∏–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω: ${outgoingMessageCount}`);
            direction = '–ò—Å—Ö–æ–¥—è—â–∏–µ'; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç mainUser, —Ç–æ –æ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ
        } else {
            messageCount++;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º group_id, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const groupId = (chat.type === 'group' || chat.type === 'supergroup') ? chat.id : null; // –ò–ª–∏ '' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π

        // –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const messageInfo = {
            user_id: user ? user.id : null,
            user_name: username,
            group_id: groupId,
            group_name: chat.title || '–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            direction: direction,
            timestamp: timestamp
        };
    //    console.log(messageInfo);
        await saveFullStatisticsToFile(messageInfo);
    }
});






// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message:text', async (ctx) => {
    if (ctx.chat && ctx.chat.id === excludedChatId) return;

    const user = ctx.from;
    const username = user ? user.username || user.first_name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const date = new Date();

    const datePart = date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
    });

    const timePart = date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false // –£–±–∏—Ä–∞–µ–º 12-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    });

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å –ø—Ä–æ–±–µ–ª–æ–º
    const timestamp = `${datePart} ${timePart}`;

    if (ctx.message.text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        const dateTime = new Date().toLocaleString();
        await replyWithoutCounting(ctx, `–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${dateTime}\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${outgoingMessageCount}\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${groupMessageCount}`);
        return;
    }

//    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username}: ${ctx.message.text}`);

    const chat = ctx.chat; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ chat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!chat) {
        console.error('Chat is undefined');
        return; // –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ chat –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    let direction = '–í—Ö–æ–¥—è—â–∏–µ'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ
    if (username === mainUser) {
        outgoingMessageCount++;
//        console.log(`–°—á–µ—Ç—á–∏–∫ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω: ${outgoingMessageCount}`);
        direction = '–ò—Å—Ö–æ–¥—è—â–∏–µ'; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç mainUser, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    } else {
        messageCount++;
        if (chat.type === 'group' || chat.type === 'supergroup') {
            groupMessageCount++;
//            console.log(`–°—á–µ—Ç—á–∏–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω: ${groupMessageCount}`);
        }
    }

    // –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageInfo = {
        user_id: user ? user.id : null,
        user_name: username,
        group_id: (chat.type === 'group' || chat.type === 'supergroup') ? chat.id : null, // –ü—É—Å—Ç–æ–π group_id –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        group_name: chat.title || '–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        direction: direction, // –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        timestamp: timestamp
    };
//    console.log(messageInfo);
    await saveFullStatisticsToFile(messageInfo);
});




// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (ctx) => {
    const callbackData = ctx.callbackQuery.data;
    if (callbackData === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        await ctx.answerCallbackQuery();
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }
});


bot.start().then(()=> console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));

bot.catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:', err);
});
